1)
- cross platform compatible
- interpreted to byte code, interacts with any Python virtual machine
- py2exe module (creates a program binary executable)

2) #IMP
program flow
	-Program modules (std lib/imports)
	-modules (statements..)
	-statements (expressions..)
	-expression (object)

3)
String variables can have 'single quote' or "double quote"

4)
operators
+ 	- 	* 	/ 	// 	% 	**
// is integer division #IMP
% modulus
** exponential #IMP

5)
mnemoninc to remember precedence
Please Excuse My Dear Aunt Sally (PEMDAS)
Parenthesis
Exponentiation
Multiplication
Division
Addition
Subraction

6)
vaiable naming guidelines
[letter,_] + [letter,_,digits]

7)#IMP
Garbage collector checks for objects that reference count has become zero
    
8) #IMP program
-----rev.py-----------
def reverse(text):
    if len(text) <= 1:
        return text

    return reverse(text[1:]) + text[0]
---------------------
#IMP  reverses string
>>> 'hello world'[::-1]
OR
''.join(reversed(s))    

9) swapping variables
>>> a=1
>>> b=2
>>> a,b=b,a

10)
#IMP
temp = st[-1:][0] #last element of list st assigned to temp
#if not use [0] temp will get a list with single element

Example:
>>> l=[1,2,3]
>>> temp=l[-1:]
>>> temp
[3]
>>> temp=l[-1:][0]
>>> temp
3

11)
>>> 10//3
3
>>> 10%3
1
>>> 10/3
3.3333333333333335

12)
I can use “;” to
put more than one line of code on the
same line in my Python programs

13)#IMP
When you want to refer to some function from a module
namespace other than the one you are currently in, you need
to qualify the invocation of the function with the module’s
namespace name.
So, instead of invoking the function as print_lol(cast)
you need to qualify the name as printer.print_lol(cast).
That way, the Python interpreter knows where to look. The
format for namespace qualification is: the module’s name, 
followed by a period, and then the function name.

14)
BIFs (Built in functions) have their very own namespace called
(wait for it) __builtins__. Not in __main__ namespace

15) #IMP
If module has default value for an argument:
def print_lol(the_list, level=0):

then both with and without second arguments will work
printer.print_lol(movies, 0)
printer.print_lol(movies)

16)
>>> numbers = '1,2,3,4'
>>> (a,b,c,d) = numbers.split(',')
>>> a
'1'
>>> c
'3'
>>> 

18) #IMP
When you have a situation where code must always run no matter 
what errors occur, add that code to your try statement’s finally 
suite:
try:
    man_file = open('man_data.txt', 'w')
    other_file = open('other_data.txt', 'w')
    print(man, file=man_file)
    print(other, file=other_file)
    
except IOError:
    print('File error.')

finally:
    man_file.close()
    other_file.close()


19)#IMP exceptions
When an exception is raised and handled by your except suite, the
Python interpreter passes an exception object
into the suite. A small change makes this exception object
available to your code as an identifier:

except IOError as err:
    print('File error: ' + str(err))    

#IMP exception objects and strings are not compatible
types, so trying to concatenate one with the other leads to 
problems. You can convert (or cast) one to the other
using the str() BIF    

20)#IMP
The str() BIF can be used to access the stringed representation 
of any data object that supports the conversion.
The locals() BIF returns a collection of variables within the 
current scope.

21)#IMP
Unlike method chains, which read from left to right, 
function chains read from right to left (just to keep things 
interesting).

22)#IMP
Processing a list to remove duplicates is one area where a list 
comprehension can’t help you, because duplicate removal is not 
a transformation; it’s more of a filter.

23)
shorter = min(len(a),len(b))

24) to get maximum of first or third element of array
big = max(nums[0], nums[2])

25) #IMP range is NOT inclusive of max limit
>>> for a in range(1,5):
	print (a)
1
2
3
4

#Use of end=

>>> for a in range(1,5):
	print(a,end=' ')

	
1 2 3 4 

Use of sep=
>>> print("elsa","ana")
elsa ana
>>> print("elsa", "ana", sep='-')
elsa-ana


26) #IMP if you give THIRD argument its in skip steps
>>> for a in range(1,10,2):
	print (a)
1
3
5
7
9

27) #IMP enumerate, starts with 0 if you do not give
>>> l = range(1,20,3)
>>> l
range(1, 20, 3)
>>> for a in enumerate(l):
	print(a)
	
(0, 1)
(1, 4)
(2, 7)
(3, 10)
(4, 13)
(5, 16)
(6, 19)

28)#IMP
zipped_list is a list of tuples where ith tuple i.e (1, ‘a’) is created using the ith element of list_a i.e 1 and ith element of list_b i.e ‘a’

If the length of the iterables are not equal, zip creates the list of tuples of length equal to the smallest iterable.

>>> name = ["man", "nik", "sha", "ast"]
>>> roll = [4, 1, 3, 2]
>>> mapped = zip (name, roll)
>>> mapped
<zip object at 0x0246A508>
>>> new = set(mapped)
>>> new
{('nik', 1), ('ast', 2), ('man', 4), ('sha', 3)}

zip function:
>>> lista = [1, 2, 3]
>>> listb = ['a', 'b', 'c']
>>> zipped = zip(lista, listb)
>>> type(zipped)
<class 'zip'>
>>> newa, newb = zip(*zipped)
>>> newa
(1, 2, 3)
>>> newb
('a', 'b', 'c')
>>> type(newa)
<class 'tuple'>
>>> 
>>> names = ["Stuart", "Bob", "Kevin"]
>>> age = [24, 25, 30]
>>> rank = [1, 2, 3]
>>> mapped = zip(names, age, rank)
>>> type(mapped)
<class 'zip'>
>>> minions, their_ages, their_ranks = zip(*mapped)
>>> minions
('Stuart', 'Bob', 'Kevin')
>>> type(minions)
<class 'tuple'>



>>> a0=('a','b','c')
>>> b0=(1,2)
>>> c0=zip(a0,b0)
>>> c0
<zip object at 0x02A47A08>
>>> type(c0)
<class 'zip'>
>>> d0=dict(c0)
>>> d0
{'a': 1, 'b': 2}

// #IMP Note: c not assigened above

29) #IMP filter, map, reduce using lamda
>>> foo = [2, 18, 22, 17, 24, 8, 12, 27]
>>> filtered_f = list(filter(lambda x:x%3 == 0, foo)) #IMP need to list()
>>> filtered_f
[18, 24, 12, 27]
>>> mapped_f = list(map(lambda x:x*2+10,filtered_f)) #IMP need to list()
>>> mapped_f
[46, 58, 34, 64]
>>> from functools import reduce  #IMP need to import reduce from functools
>>> from functools import reduce
>>> reduce(lambda x,y: x+y, foo) #IMP from functools import reduce
130

#IMP reduce is now moved to functools module

30)Third party packages index (PYPI) #IMP
https://pypi.python.org/pypi

31) #IMP precedence of 'not', 'and' and 'or'
not
and
or

For example, True or not False and False returns True

33) Transposing a matrix, using zip #IMP
>>> mat = [[1, 2, 3], [4, 5, 6]]
>>> zip(*mat)
>>> row1, row2, row3 = zip(*mat)
>>> row1
(1, 4)
>>> row2
(2, 5)
>>> row3
(3, 6)
	
34) Store all three values of the list in 3 new variables
	>>> a = [1, 2, 3]
	>>> x, y, z = a 
	
35) using two arrays
List 1 = ['a', 'b', 'c', 'd']

List 2 = ['p', 'q', 'r', 's']

Write a Python code to print

    ap
    bq
    cr
    ds

    >>> for x, y in zip(list1,list2):
    ...    print x, y
    ...
    a p
    b q
    c r
    d s
	
36) Convert it to a single list without using any loops. #IMP
a = [[1, 2], [3, 4], [5, 6]]
    >>> import itertools 
    >>> list(itertools.chain.from_iterable(a))
    [1, 2, 3, 4, 5, 6]
	
	Output:- [1, 2, 3, 4, 5, 6]
	
37) Check if two words are anagrams #IMP

	from collections import Counter
    def is_anagram(str1, str2):
         return Counter(str1) == Counter(str2)
    >>> is_anagram('abcd','dbca')
    True
    >>> is_anagram('abcd','dbaa')
    False
	
38) Taking a string input; For example "1 2 3 4" and return [1, 2, 3, 4]
	>>> result = map(lambda x:int(x) ,raw_input().split())
    1 2 3 4
    >>> result
    [1, 2, 3, 4]

#IMP Python 3 has input() instead of raw_input()
>>> result = map(lambda x:int(x), input().split())
1 2 3 4
>>> result
<map object at 0x02EA53F0>
>>> num = result
>>> num
<map object at 0x02EA53F0>
>>> num = list(result)
>>> num
[1, 2, 3, 4]
	
39) Regular exrpession replace
>>> import re
>>> phone = "2000-959-559 # This is Phone Number"
>>> 
>>> phone
'2000-959-559 # This is Phone Number'
>>> num = re.sub('#.*$',"",phone)
>>> num
'2000-959-559 '

40) regular exrpession search
>>> import re
>>> line = "Ther can be one cat or too many cats"
>>> if re.search("cat",line):
	print(line)

	
Ther can be one cat or too many cats
>>> 

41) Find all occurances
>>> import re
>>> line = "Ther can be one cat or too many cats"
>>> howMany = re.findall("cat", line)
>>> howMany
['cat', 'cat']

	
42) match and groups
import re

>>> line  = 'Cats are smarter than dogs'
>>> matchObj = re.match(r'(.*) are (.*?) .*', line, re.M|re.I)
>>> if matchObj:
	print ('matchObj.group():' + matchObj.group())
	print ('matchObj.group(1):' + matchObj.group(1))
	print ('marchObj.group(2):' + matchObj.group(2))
else:
	print ("No match")
	
o/p:
matchObj.group():Cats are smarter than dogs
matchObj.group(1):Cats
marchObj.group(2):smarter

43) Every function has a return value. 
For example print() funcion return None

44) #IMP ternary operator in Python ??
a if <condition> else b
eg:
'true' if True else 'false'

45) #IMP Max occurance in list
>>> arr = [1, 2,3,4,2, 2,3,1, 5, 4,4]
>>> arr
[1, 2, 3, 4, 2, 2, 3, 1, 5, 4, 4]
>>> #Max occurance in list
>>> max(set(arr), key = arr.count)

46) #IMP Range to list
arr = list(range(1,11))

47) #IMP list comprehension
>>> sq = [i**2 for i in range(1,11)]
>>> sq
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

48) #IMP dictionary comprehension
>>> from string import ascii_lowercase

>>> ascii_lowercase
'abcdefghijklmnopqrstuvwxyz'
>>> {i:j for i,j in enumerate(ascii_lowercase) if i< 6}
{0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5: 'f'}

49) #IMP extraction of nested lists
>>> list1 = [[1], [2], [3], [4], [5]]
>>> sum(list1,[])
[1, 2, 3, 4, 5]

50)