1)
#IMP
import re

#notes:
. (dot) means any character
* or + means 0 or more and 1 or more times respectively

#IMP
?
means start at first (non-greedy)

re.search()         -> return True/False
re.findall()        -> match and extract

#IMP
Example:

// Example of re.search
if re.search('NRT',line):
	print (line)
	
// Example of re.findall	
y = re.findall('(2015*).(NRT{1})(\d+.\d+.\d+.\d+))

if y: print(y)	


2)
---re.py---
#!/usr/bin/python
import re

fh = open("C:\cygwin\home\lokeshpurohit\py\data","r")

for line in fh:
    line = line.rstrip()   #removes newline from end but has to be assigned to str back
    #if re.search('4G',line): #does line contain NRT1
    #    print line
    #20150303070000|14|4GDATA|0|INDIA|VODA|NEW|NOV|61.50.0.52
    y = re.findall('(201503030700*).*\|(4G.{1})\|.*(\d+.\d+.\d+.\d+)$',line)
    if y: print (y)   #extracts time,NRT and IP address from each line
    
------------

3) match function
#IMP match function attempts to match RE pattern to string with optional flags.
The re.match function returns a match object on success, None on failure. 
We use group(num) or groups() function of match object to get matched expression.

4) #IMP
group(num=0)	This method returns entire match (or specific subgroup num)
groups()	This method returns all matching subgroups in a tuple (empty if there weren't any)

5) Example:
import re

>>> line  = 'Cats are smarter than dogs'
>>> matchObj = re.match(r'(.*) are (.*?) .*', line, re.M|re.I)
>>> if matchObj:
	print ('matchObj.group():' + matchObj.group())
	print ('matchObj.group(1):' + matchObj.group(1))
	print ('marchObj.group(2):' + matchObj.group(2))
else:
	print ("No match")
	
o/p:
matchObj.group():Cats are smarter than dogs
matchObj.group(1):Cats
marchObj.group(2):smarter

6) Example of groups
>>> matchObj.groups() #IMP returns all subgroups in a tuple
('Cats', 'smarter')
>>> matchObj.group(0)
'Cats are smarter than dogs'
>>> matchObj.group(1)
'Cats'
>>> matchObj.group(2)
'smarter'	

7)
Search function: (how different than match)
#IMP : match checks for a match only at the beginning of the string, 
while 'search' checks for a match anywhere in the string (this is what Perl does by default).

8)Example of search
>>> line = 'cats are smarter than dogs'
>>> import re
>>> searchObj = re.search(r'(.*) are (.*?) .*',line)
>>> searchObj.groups()
('cats', 'smarter')
>>> searchObj.group(1)
'cats'
>>> searchObj.group(2)
'smarter'

9)-----------match/search----------
#!/usr/bin/python
import re

line = "Cats are smarter than dogs";

matchObj = re.match( r'dogs', line, re.M|re.I)
if matchObj:
   print ("match --> matchObj.group() : ", matchObj.group())
else:
   print ("No match!!")

searchObj = re.search( r'dogs', line, re.M|re.I)
if searchObj:
   print ("search --> searchObj.group() : ", searchObj.group())
else:
   print ("Nothing found!!")
   
o/p: 
No match!!
search --> matchObj.group() :  dogs

10) Search and replace:
#IMP syntax :
re.sub(pattern, repl, string, max=0)
OR in Python 3.5 max is count #IMP
re.sub(pattern, repl, string, count=0)

>>> import re
>>> phone = "2000-959-559 # This is Phone Number"
>>> 
>>> num = re.sub(r'#.*$',"",phone) #replace everythin starting from #
>>> num
'2000-959-559 '
>>> num = re.sub(r'\D',"",phone) #replace everything other than number
>>> num
'2000959559'
>>> num = re.sub(r'\D',"",phone,count=1) #Only replaces one non-digit
>>> num
'2004959-559 # This is Phone Number'

11)
count=0 # above will mean not specifying count and it replaces all

12)Regular Expression Modifiers: Option Flags #IMP
re.I	Performs case-insensitive matching.
re.L	Interprets words according to the current locale. 
		This interpretation affects the alphabetic group (\w and \W), 
		as well as word boundary behavior (\b and \B).
re.M	Makes $ match the end of a line (not just the end of the string) 
		and makes ^ match the start of any line (not just the start of the string).
re.S	Makes a period (dot) match any character, including a newline.
re.U	Interprets letters according to the Unicode character set. 
		This flag affects the behavior of \w, \W, \b, \B.		


12) #IMP
Except for control characters, (+ ? . * ^ $ ( ) [ ] { } | \), all characters match themselves. 
You can escape a control character by preceding it with a backslash.		

13) Pattern and description
[...]	Matches any single character in brackets. ([0-9]	Match any digit; same as [0123456789])
[^...]	Matches any single character not in brackets ([^aeiou]	Match anything other than a lowercase vowel)
re*		Matches 0 or more occurrences of preceding expression.
re+		Matches 1 or more occurrence of preceding expression.
re?		Matches 0 or 1 occurrence of preceding expression.
re{n}	Matches exactly n number of occurrences of preceding expression.
re{ n,}	Matches n or more occurrences of preceding expression.
re{ n, m}	Matches at least n and at most m occurrences of preceding expression.
a| b	Matches either a or b.
(re)	Groups regular expressions and remembers matched text.
(?: re)	Groups regular expressions without remembering matched text.
\w	Matches word characters.
\W	Matches nonword characters.
\s	Matches whitespace. Equivalent to [\t\n\r\f].
\S	Matches nonwhitespace.
\d	Matches digits. Equivalent to [0-9].
\D	Matches nondigits.
\A	Matches beginning of string.
\Z	Matches end of string. If a newline exists, it matches just before newline.
\z	Matches end of string.
\G	Matches point where last match finished.
\b	Matches word boundaries when outside brackets. Matches backspace (0x08) when inside brackets.
\B	Matches nonword boundaries.
\n, \t, etc.	Matches newlines, carriage returns, tabs, etc.
\1...\9	Matches nth grouped subexpression.

14)	Search vs Match
>>> re.match("c", "abcdef")    # No match
>>> re.search("c", "abcdef")   # Match

15) findall
 re.findall(pattern, string, flags=0)

 Return all non-overlapping matches of pattern in string, as a list of strings. 
 The string is scanned left-to-right, and matches are returned in the order found. 
 If one or more groups are present in the pattern, return a list of groups; 
 this will be a list of tuples if the pattern has more than one group.
 
Example: #IMP difference between findall and match
>>> import re
>>> line = 'cats are smarter than dogs'
>>> Objs = re.findall(r'(.*) are (.*?) .*',line)
>>> Objs
[('cats', 'smarter')]
>>> Objs[0][1]
'smarter'
>>> Objs2 = re.match(r'(.*) are (.*?) .*',line)
>>> Objs2.groups()
('cats', 'smarter')
>>> print(Objs2.group(1))
cats

16)Raw string: #IMP
When a string is raw, the python parser will not even attempt to make any substitutions within it. 
Example:
>>> string = 'This is a\nnormal string'
>>> rawString = r'and this is a\nraw string'
>>> print string
  This is a
  normal string
>>> print rawString
  and this is a\nraw string

17) Regular expression example: #IMP
>>> message = 'call me at 415-555-1011 tomorrow or at 415-555-9999'
>>> message
'call me at 415-555-1011 tomorrow or at 415-555-9999'
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
Traceback (most recent call last):
  File "<pyshell#6>", line 1, in <module>
    phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
NameError: name 're' is not defined
>>> import re
>>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
>>> mo = phoneNumRegex.search(message)
>>> mo.group()
'415-555-1011'


>>> allNumbers = phoneNumRegex.findall(message)
>>> allNumbers
['415-555-1011', '415-555-9999']

18) Above regex often use backslashes so we used raw string
import the module 
re.compile() creates a regex object
search() method to create a match object, "search" just searched and returned once get the match, 
group() method get the matched string
"findall" created a list of such occurances, 

19) Grouping using paranthesis
>>> phoneRegEx = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
>>> mo = phoneRegEx.search(msg)
>>> mo.group()
'415-555-1011'
>>> mo.group(1)
'415'

20) Using Pipe for matching one or other pattern
>>> batRegex = re.compile(r'bat(man|mobile|copter)')
>>> batRegex
re.compile('bat(man|mobile|copter)')
>>> allOcc = batRegex.findall('batman has a batmobile')
>>> allOcc
['man', 'mobile']

21) #IMP Always first check if mo is not None.
if nothing is found it will be == None, so we can not call
mo.group() on it in that case.
matched objec equates to None if not find anything
>>> mo = batRegex.search("will not find")
>>> mo
>>> mo == None
True
>>> 

22) To see which pipe separated patter match from man|mobile|copter
>>> mo = batRegex.search(" i have a batmobile, you can see")
>>> mo.group(1)
'mobile'
>>> mo.group(0)
'batmobile'    #0 Gives full matched pattern
  
23) match zero or one time using ?
>>> batRegex = re.compile(r'bat(wo)?man')
>>> mo = batRegex.search("Adventures of batman")
>>> mo
<re.Match object; span=(14, 20), match='batman'>
>>> mo = batRegex.search("Adventures of batwoman")
>>> mo.group()
'batwoman'

24) zero or more times *
>>> mo = batRegex.search("Adventures of batwowoman")
>>> mo == None
True
>>> batRegex = re.compile(r'bat(wo)*man')
>>> mo = batRegex.search("Adventures of batwowoman")
>>> mo == None
False
>>> mo.group()
'batwowoman'

25) + means one or more

26) {x} matches exactly x times, x is a number
>>> haRegex = re.compile(r'(Ha){3}')
>>> mo = haRegex.search("he said HaHaHa")
>>> mo.group()
'HaHaHa'
 
27) #IMP
match minimum x and maximum y: {x,y}
above 
{3,} => 3 or more as y is left

28) #IMP Greedy and non-greedy
>>> digitRegex = re.compile(r'(\d){3,5}')
>>> digitRegex.search('123456789')
<re.Match object; span=(0, 5), match='12345'>
>>> digitRegex = re.compile(r'(\d){3,5}?')
>>> digitRegex.search('123456789')
<re.Match object; span=(0, 3), match='123'>

# in above ? makes it non-greedy and matches minimum requirement

29) #IMP if the regex doesnt have group then it returns List
>>> batRegex = re.compile(r'batman')
>>> batRegex.findall("he is batman i am also batman")
['batman', 'batman']

#But if the regex has groups then it return list of tuples

>>> batRegex = re.compile(r'bat(wo)(man)')
>>> batRegex.findall("i am batman she is batwoman")
[('wo', 'man')]

>>> batRegex = re.compile(r'bat(wo|no)(man)')
>>> batRegex.findall("i am batwoman she is also batnoman")
[('wo', 'man'), ('no', 'man')]

30) Character classes can be made using square brackets
[aeiou]   => (a|e|i|o|u)
[a-z]     => small alphabets given by range

>>> vowelRegex = re.compile(r'[aeiouAEIOU]')
>>> vowelRegex.findall('Robocop eats baby food.')
['o', 'o', 'o', 'e', 'a', 'a', 'o', 'o']
>>> doubleVowelRegex = re.compile(r'[aeiouAEIOU]{2}')
>>> vowelRegex.findall('Robocop eats baby food.')
['o', 'o', 'o', 'e', 'a', 'a', 'o', 'o']
>>> doubleVowelRegex.findall('Robocop eats baby food.')
['ea', 'oo']


31) Negative char class using ^
>>> consonentRegex = re.compile(r'[^aeiouAEIOU]')
>>> consonentRegex.findall('Robocop eats baby food.')
['R', 'b', 'c', 'p', ' ', 't', 's', ' ', 'b', 'b', 'y', ' ', 'f', 'd', '.']

32) dot . means any character except newline
#IMP for dot to match newlines also we need to pass another argument re.DOTALL
dotStarRegex = re.compile(r'.*',re.DOTALL)

33) Greedy and non-greedy using ?
>>> server = '<To serve human> for dinnner.>'

>>> nonGreedyRegex = re.compile(r'<(.*?)>')
>>> nonGreedyRegex.findall(server)
['To serve human']

>>> greedyRegex = re.compile(r'<(.*)>')
>>> greedyRegex
re.compile('<(.*)>')
>>> greedyRegex.findall(server)
['To serve human> for dinnner.']
 
34) just like re.DOTALL there is re.IGNORECASE or re.I

35) Search and replace:
>>> namesRegex =  re.compile(r'Agent \w+')
>>> namesRegex.findall('Agent Alice gave secrets to Agent Bob')
['Agent Alice', 'Agent Bob']
>>> namesRegex.sub('REDACTED', 'Agent Alice gave secrets to Agent Bob')
'REDACTED gave secrets to REDACTED'

36) Using group to have a part of pattern match in replaced string
>>> namesRegex = re.compile(r'Agent (\w)\w*')
>>> namesRegex.findall('Agent Alice gave the secrets to Agent Bob')
['A', 'B']
>>> namesRegex.sub(r'Agent \1***', 'Agent Alice gave the secrets to Agent Bob')
'Agent A*** gave the secrets to Agent B***'

37) passing re.VERBOSE allows us to add whitespace and comments to regex string passed
to re.compile()

38) regex for phone numbers using VERBOSE
#examples 415-555-0000, 555-0000, (415) 555-0000 ext. 12345, x12345

phoneRegex = re.compile(r'''
((\d\d\d)|(\(\d\d\d\)))?	#area code (optional)
(\s|-)						#first seperator
\d\d\d						#first 3 digits
-							#seperator
\d\d\d\d					#last 4 digits
(((ext(\.)?\s)|x)			#extension word-part (optional)
  (\d{2,5}))? 				#extension number-part (optional)
''',re.VERBOSE)

39) regex for email


40) if our regex has multiple groups findall will return too many tuples 
in a list. to avoid that. we can put () for whole regex to create one large 
group that will just return mathed pattern as group 0 in all tuples will have right thing.